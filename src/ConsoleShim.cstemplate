using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;

//{version}
//{target}

static class ConsoleShim
{
    //{appFile}
    //{defaultArgs}
    //{isConsoleFile}

    static void Main(string[] args)
    {
        //{hideConsole}

        //{waitForExit}
        
        if (args.Contains("--mkshim-test"))
        {
            string message = "Success: target file exists.";
            int exitCode = 0;
            if(!File.Exists(appFile))
            {
                message = "Error: target file is not found.";
                exitCode = -1;
            }

            var userMessage = message + Environment.NewLine + "Target: " + appFile;

            userMessage.Show("MkShim: --mkshim-test");

            Environment.Exit(exitCode);
        }
        else if (args.Contains("--mkshim-noop"))
        {
            var userMessage = "Executing shim in 'no operation' mode."+ Environment.NewLine + 
                              "Target: " + appFile+ Environment.NewLine + 
                              "Default params: " + defaultArgs;

            userMessage.Show("MkShim: --mkshim-noop");
            Environment.Exit(0);
        }

        if (!File.Exists(appFile))
        {
            Console.WriteLine("The target executable was not found at " + appFile);
            Environment.Exit(-1);
        }

        
        if (args.Contains("--mkshim-exit"))
        {
            // Debug.Assert(false);
            toWait = false;
        }

        try
        {
            Win32.ListenToConsoleExit();
            Environment.ExitCode = Run(appFile, defaultArgs + Extensions.ToCmdArgs(args), Environment.CurrentDirectory, toWait, toElevate: false);
        }
        catch (Win32Exception e)
        {
            if (e.NativeErrorCode == Win32.ERROR_ELEVATION_REQUIRED)
            {
                try
                {
                    Environment.ExitCode = Run(appFile, Extensions.ToCmdArgs(args), Environment.CurrentDirectory, toWait, toElevate: true);
                }
                catch (Win32Exception e1)
                {
                    if (e1.NativeErrorCode != Win32.ERROR_CANCELLED)
                        throw;
                }
            }
        }

        bool pause = false;
        //{setPause}
        if (isConsole && pause)
        {
            Console.WriteLine("Press any key to exit...");
            Console.ReadKey(true);
        }
    }

    public static Process ChildProcess;

    static int Run(string file, string arguments, string workingDir, bool toWait, bool toElevate)
    {
        int result = 0;

        ChildProcess = new Process();
        ChildProcess.StartInfo.FileName = file;
        ChildProcess.StartInfo.Arguments = arguments;
        ChildProcess.StartInfo.UseShellExecute = false;
        ChildProcess.StartInfo.WorkingDirectory = workingDir;
        ChildProcess.StartInfo.RedirectStandardError = false;
        ChildProcess.StartInfo.RedirectStandardOutput = false;
        ChildProcess.StartInfo.RedirectStandardInput = false;
        ChildProcess.StartInfo.CreateNoWindow = !isConsole;
        ChildProcess.StartInfo.WindowStyle = ProcessWindowStyle.Minimized;

        if (Environment.OSVersion.Version.Major >= 6 && toElevate)
        {
            ChildProcess.StartInfo.UseShellExecute = true;
            ChildProcess.StartInfo.Verb = "runas";
            ChildProcess.StartInfo.WindowStyle = ProcessWindowStyle.Normal;
        }

        ChildProcess.Start();

        if(toWait)
        {
            ChildProcess.WaitForExit();
            result = ChildProcess.ExitCode;
        }

        return result;
    }

    static void HideConsoleWindowIfNotInTerminal()
    {
        var thisApp = Process.GetCurrentProcess();

        if (thisApp.IsDirectlyHostedByExplorer())
        {
            // we can check the name for being "WindowsTerminal" but there is no need since
            // FindVisibleExternalTerminal uses window class name specific for terminal
            // var name = thisApp.FindVisibleExternalTerminal().GetWindowThreadProcess()?.ProcessName;

            thisApp.FindVisibleExternalTerminal().Hide(); // hide the terminal connected to our console; required for Win10+
            ConsoleExtensions.GetConsoleWindow().Hide(); // hide our own console; will handle console on older Windows
        }
    }
}

public static class Extensions
{
    //{isConsoleFile}

    public static string ToCmdArgs(IEnumerable<string> args)
    {
        return string.Join(" ",
                           args.Select(x => (x.Contains(" ") || x.Contains("\t")) ? "\""+x+"\"" : x)
                               .ToArray());
    }

    public static void Show(this string message, string context = null)
    {
        if(isConsole)
            Console.WriteLine(message);
        else
            System.Windows.Forms.MessageBox.Show(message, context);
    }
}

static class Win32
{
    public const int ERROR_ELEVATION_REQUIRED = 740;
    public const int ERROR_CANCELLED = 1223;

    enum SignalControlType
    {
        CTRL_C_EVENT = 0,
        CTRL_BREAK_EVENT = 1,
        CTRL_CLOSE_EVENT = 2,
        CTRL_LOGOFF_EVENT = 5,
        CTRL_SHUTDOWN_EVENT = 6
    }

    delegate bool Handler(SignalControlType sig);

    static Handler handler;

    [DllImport("Kernel32")]
    static extern bool SetConsoleCtrlHandler(Handler handler, bool add);

    public static void ListenToConsoleExit()
    {
        handler = ConsoleCtrlHandler; // to ensure it's not collected
        SetConsoleCtrlHandler(handler, true);
    }

    static bool ConsoleCtrlHandler(SignalControlType signal)
    {
        int exitCode = -1;
        try
        {
            if (ConsoleShim.ChildProcess != null && ConsoleShim.ChildProcess.HasExited == false)
                ConsoleShim.ChildProcess.Kill();

            if (ConsoleShim.ChildProcess != null && ConsoleShim.ChildProcess.HasExited == true)
                exitCode = ConsoleShim.ChildProcess.ExitCode;
        }
        catch { }
        Environment.Exit(exitCode);
        return true;
    }
}


internal static class ConsoleExtensions
{
    const int SW_HIDE = 0;
    const int SW_SHOW = 5;

    [DllImport("User32")]
    static extern int ShowWindow(IntPtr hwnd, int nCmdShow);

    static public void Hide(this IntPtr hwnd) { ShowWindow(hwnd, SW_HIDE); }

    [DllImport("kernel32")]
    public static extern IntPtr GetConsoleWindow();

    [DllImport("user32.dll")]
    private static extern IntPtr GetWindowThreadProcessId(IntPtr hWnd, out IntPtr ProcessId);

    public static Process GetWindowThreadProcess(this IntPtr hWnd)
    {
        IntPtr ProcessId;
        GetWindowThreadProcessId(hWnd, out ProcessId);
        if (ProcessId != IntPtr.Zero)
            return Process.GetProcessById((int)ProcessId);
        else
            return null;
    }
}


public static class ProcessExtensions
{
    public static bool IsDirectlyHostedByExplorer(this Process process) 
    { 
        return process.Parent().ProcessName == "explorer";
    }

    public static Process Parent(this Process process)
    {
        try
        {
            return Process.GetProcessById(GetParentPid(process.Id));
        }
        catch
        {
            return null;
        }
    }

    public static IntPtr FindVisibleExternalTerminal(this Process process)
    {
        string className = "CASCADIA_HOSTING_WINDOW_CLASS";
        string windowTitle = process.MainModule.FileName;  // or null to match any title

        IntPtr hWnd = FindWindow(className, windowTitle);

        bool isVisible = IsWindowVisible(hWnd);

        return isVisible ? hWnd : IntPtr.Zero;
    }

    [DllImport("user32.dll", SetLastError = true)]
    static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

    [DllImport("user32.dll")]
    static extern bool IsWindowVisible(IntPtr hWnd);

    // Native API approach: fast and no WMI required
    [StructLayout(LayoutKind.Sequential)]
    struct PROCESS_BASIC_INFORMATION
    {
        public IntPtr Reserved1;
        public IntPtr PebBaseAddress;
        public IntPtr Reserved2_0;
        public IntPtr Reserved2_1;
        public IntPtr UniqueProcessId;
        public IntPtr InheritedFromUniqueProcessId;
    }

    [DllImport("ntdll.dll")]
    static extern int NtQueryInformationProcess(
        IntPtr processHandle,
        int processInformationClass,
        ref PROCESS_BASIC_INFORMATION processInformation,
        int processInformationLength,
        out int returnLength);

    static int GetParentPid(int pid)
    {
        var process = Process.GetProcessById(pid);
        var pbi = new PROCESS_BASIC_INFORMATION();
        int returnLength;
        NtQueryInformationProcess(process.Handle, 0, ref pbi, Marshal.SizeOf(pbi), out returnLength);
        return pbi.InheritedFromUniqueProcessId.ToInt32();
    }
}